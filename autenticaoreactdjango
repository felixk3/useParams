Para criar um sistema com autenticação usando **Django** e **ReactJS**, você pode seguir os seguintes passos, considerando as boas práticas para implementação de autenticação, cadastro de usuários e login.

### Estrutura do Projeto

A estrutura do projeto pode ser dividida da seguinte maneira:

```
my_project/
    ├── backend/         # Django Backend
    │   ├── my_project/  # Código do Django
    │   ├── users/       # App para usuários
    │   ├── manage.py    # Script de gerenciamento do Django
    ├── frontend/        # React Frontend
    │   ├── src/         # Código do React
    │   ├── package.json # Configuração do React
    └── README.md        # Instruções gerais
```

### 1. Backend (Django)

#### Passo 1: Configuração do Django

1. **Crie um projeto Django:**
   ```bash
   django-admin startproject my_project backend
   cd backend
   ```

2. **Instale as dependências necessárias:**
   ```bash
   pip install django djangorestframework djangorestframework-simplejwt
   ```

3. **Crie um app de usuários no Django:**
   ```bash
   python manage.py startapp users
   ```

4. **Adicione o `users` e outras dependências ao `INSTALLED_APPS` em `backend/my_project/settings.py`:**

   ```python
   INSTALLED_APPS = [
       # Apps do Django
       'rest_framework',
       'rest_framework_simplejwt',
       'users',
   ]
   ```

#### Passo 2: Configuração do Serializador e Views para Cadastro e Login

1. **Criar um serializador para o usuário em `users/serializers.py`:**

   ```python
   from django.contrib.auth.models import User
   from rest_framework import serializers

   class UserSerializer(serializers.ModelSerializer):
       class Meta:
           model = User
           fields = ['id', 'username', 'email', 'password']
           extra_kwargs = {'password': {'write_only': True}}

       def create(self, validated_data):
           user = User.objects.create_user(
               validated_data['username'],
               validated_data['email'],
               validated_data['password']
           )
           return user
   ```

2. **Criar as views para cadastro e login em `users/views.py`:**

   Para a autenticação, vamos usar o JWT com `djangorestframework-simplejwt`.

   ```python
   from django.contrib.auth.models import User
   from rest_framework import status, permissions
   from rest_framework.response import Response
   from rest_framework.views import APIView
   from .serializers import UserSerializer
   from rest_framework_simplejwt.tokens import RefreshToken

   # Cadastro de Usuário
   class RegisterView(APIView):
       def post(self, request):
           serializer = UserSerializer(data=request.data)
           if serializer.is_valid():
               user = serializer.save()
               return Response({"msg": "Usuário criado com sucesso!"}, status=status.HTTP_201_CREATED)
           return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

   # Login de Usuário
   class LoginView(APIView):
       def post(self, request):
           username = request.data.get('username')
           password = request.data.get('password')
           user = User.objects.filter(username=username).first()
           
           if user and user.check_password(password):
               refresh = RefreshToken.for_user(user)
               return Response({
                   'refresh': str(refresh),
                   'access': str(refresh.access_token)
               })
           return Response({"msg": "Credenciais inválidas!"}, status=status.HTTP_400_BAD_REQUEST)
   ```

3. **Adicionar as URLs para as views de cadastro e login em `users/urls.py`:**

   ```python
   from django.urls import path
   from .views import RegisterView, LoginView

   urlpatterns = [
       path('register/', RegisterView.as_view(), name='register'),
       path('login/', LoginView.as_view(), name='login'),
   ]
   ```

4. **Registrar as URLs no `backend/my_project/urls.py`:**

   ```python
   from django.contrib import admin
   from django.urls import path, include

   urlpatterns = [
       path('admin/', admin.site.urls),
       path('api/users/', include('users.urls')),
   ]
   ```

#### Passo 3: Configuração do JWT no Django

1. **Adicionar as configurações do JWT no `settings.py`:**

   ```python
   SIMPLE_JWT = {
       'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
       'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
       'ROTATE_REFRESH_TOKENS': True,
       'BLACKLIST_AFTER_ROTATION': True,
       'UPDATE_LAST_LOGIN': False,
   }
   ```

2. **Adicionar as permissões para acesso autenticado:**

   No `settings.py`:

   ```python
   REST_FRAMEWORK = {
       'DEFAULT_AUTHENTICATION_CLASSES': [
           'rest_framework_simplejwt.authentication.JWTAuthentication',
       ],
       'DEFAULT_PERMISSION_CLASSES': [
           'rest_framework.permissions.IsAuthenticated',
       ],
   }
   ```

### 2. Frontend (ReactJS)

#### Passo 1: Configuração do React

1. **Crie o projeto React:**
   ```bash
   npx create-react-app frontend
   cd frontend
   ```

2. **Instale as dependências:**
   ```bash
   npm install axios react-router-dom
   ```

3. **Estrutura básica do React:**

   Crie os componentes necessários para o cadastro, login e página principal.

#### Passo 2: Criando Componentes de Cadastro e Login

1. **Componente de Cadastro (`Register.js`):**

   ```javascript
   import React, { useState } from 'react';
   import axios from 'axios';

   const Register = () => {
       const [username, setUsername] = useState('');
       const [email, setEmail] = useState('');
       const [password, setPassword] = useState('');

       const handleSubmit = async (e) => {
           e.preventDefault();
           try {
               await axios.post('http://localhost:8000/api/users/register/', {
                   username,
                   email,
                   password,
               });
               alert('Cadastro realizado com sucesso!');
           } catch (error) {
               alert('Erro ao cadastrar!');
           }
       };

       return (
           <form onSubmit={handleSubmit}>
               <input type="text" placeholder="Username" onChange={(e) => setUsername(e.target.value)} />
               <input type="email" placeholder="Email" onChange={(e) => setEmail(e.target.value)} />
               <input type="password" placeholder="Password" onChange={(e) => setPassword(e.target.value)} />
               <button type="submit">Cadastrar</button>
           </form>
       );
   };

   export default Register;
   ```

2. **Componente de Login (`Login.js`):**

   ```javascript
   import React, { useState } from 'react';
   import axios from 'axios';

   const Login = () => {
       const [username, setUsername] = useState('');
       const [password, setPassword] = useState('');

       const handleSubmit = async (e) => {
           e.preventDefault();
           try {
               const response = await axios.post('http://localhost:8000/api/users/login/', {
                   username,
                   password,
               });
               localStorage.setItem('access_token', response.data.access);
               alert('Login bem-sucedido!');
           } catch (error) {
               alert('Credenciais inválidas!');
           }
       };

       return (
           <form onSubmit={handleSubmit}>
               <input type="text" placeholder="Username" onChange={(e) => setUsername(e.target.value)} />
               <input type="password" placeholder="Password" onChange={(e) => setPassword(e.target.value)} />
               <button type="submit">Login</button>
           </form>
       );
   };

   export default Login;
   ```

#### Passo 3: Configuração de Roteamento

1. **Adicione o roteamento em `App.js`:**

   ```javascript
   import React from 'react';
   import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
   import Register from './components/Register';
   import Login from './components/Login';

   const App = () => {
       return (
           <Router>
               <Switch>
                   <Route path="/register" component={Register} />
                   <Route path="/login" component={Login} />
               </Switch>
           </Router>
       );
   };

   export default App;
   ```

### Conclusão

Agora você tem uma aplicação com **Django** configurada para autenticação de usuários usando JWT, e um frontend em **ReactJS** onde os usuários podem se cadastrar e fazer login.

- **Django** gerencia o backend, incluindo o cadastro, login e autenticação de usuários.
- **ReactJS** oferece uma interface para o usuário interagir com o sistema.
